!function($){"use strict";
//***************************************
// Main Application
// To get direct links to audio files in Google Drive:
// http://directlink.booogle.net/
//***************************************
angular.module("app",["ui.router","ngAnimate","chart.js"]).run(["$sce","$timeout","$rootScope","$state","$stateParams",function($sce,$timeout,$rootScope,$state,$stateParams){
// It's very handy to add references to $state and $stateParams to the
// $rootScope
$rootScope.$state=$state,$rootScope.$stateParams=$stateParams,$rootScope.cache={};var Airtable=require("airtable");$rootScope.Airtable=new Airtable({apiKey:"keyNIbNk17BU31gT8"}).base("appA1AUk2jnO8Xmzt")}]).config(["$locationProvider","$stateProvider","$urlRouterProvider",function($locationProvider,$stateProvider,$urlRouterProvider){
/////////////////////////////
// Redirects and Otherwise //
/////////////////////////////
// Use $urlRouterProvider to configure any redirects (when) and invalid
// urls (otherwise).
$urlRouterProvider.when("/admin","/admin/students"),
//.otherwise(token ? '/sites' : '/start');
//////////////////////////
// State Configurations //
//////////////////////////
$stateProvider.state("students",{url:"/admin/students/:query",templateUrl:"views/students.html",
// auth: true,
/*resolve: {
                cards: function ($stateParams, $rootScope, $http) {

                }
            },*/
controller:function($scope,$rootScope,$state,$filter,$http){$rootScope.showAdmin=!0;var data=[];$rootScope.Airtable("Students").select({sort:[{field:"LastName",direction:"asc"}]}).eachPage(function(records,fetchNextPage){records.forEach(function(record){record.fields.id=record.id,data.push(record.fields)}),fetchNextPage()},function(error){$scope.students=data,$scope.$apply()}),$rootScope.query=$state.params.query,$scope.setSort=function(key,e){return key?(e.preventDefault(),key=key.replace(/ /g,"+"),void($scope.order=$scope.order==key?"-"+key:key)):void($scope.order=["Closeness","LastAssessment"])},$scope.setSort(),$scope.checkall=!1,$scope.checkallClick=function(){for(var arr=$filter("filter")($scope.students,$scope.query),i=0;i<arr.length;i++)arr[i].selected=$scope.checkall},$scope.print=function(){for(var students=[],i=0;i<$scope.students.length;i++)$scope.students[i].selected&&students.push($scope.students[i].id);students.length>10&&!confirm("Printing over 10 students at a time doesn't always work.  If you run in to issues, wait one minute, click Back, and refresh the page. \n\n Are you sure you want to continue?")||(students.length?$state.go("printAssessment",{students:students.join(",")}):alert("Please select at least one student"))}}}),$stateProvider.state("studentsChart",{url:"/admin/chart/:query",templateUrl:"views/students-chart.html",
// auth: true,
/*resolve: {
                cards: function ($stateParams, $rootScope, $http) {

                }
            },*/
controller:function($scope,$rootScope,$state,$filter,$http){$rootScope.showAdmin=!0,$rootScope.query=$state.params.query;var calculate=function(students){$scope.query&&$scope.query.length&&(students=$filter("filter")(students,$scope.query)),console.log(students);for(var labels=[],data=[],colors=[],i=0;i<students.length;i++)students[i].Closeness&&(labels.push(students[i].FirstName+" "+students[i].LastName),data.push(students[i].Closeness),colors.push(students[i].Closeness<0?"#f7464a":"#3c763d"));$scope.labels=labels,$scope.data=data,$scope.colors=colors},data=[];$rootScope.Airtable("Students").select({sort:[{field:"LastName",direction:"asc"}]}).eachPage(function(records,fetchNextPage){records.forEach(function(record){record.fields.id=record.id,data.push(record.fields)}),fetchNextPage()},function(error){$scope.students=data,calculate(data),$scope.$apply()}),$scope.updateQuery=function(){calculate($scope.students,$scope.query)}}}).state("editAssessment",{url:"/admin/student/:student",template:'<div assessment edit="true" type="type" student="student"></div>',controller:function($scope,$rootScope,$state,$filter,$http){$rootScope.showAdmin=!0,$scope.type=$state.params.type,$scope.student=$state.params.student}}).state("viewAssessment",{url:"/student/:student",template:'<div assessment type="type" student="student"></div>',controller:function($scope,$rootScope,$state,$filter,$http){$scope.type=$state.params.type,$scope.student=$state.params.student}}).state("printAssessment",{url:"/print/:students",templateUrl:"views/print.html",controller:function($scope,$rootScope,$state,$filter,$http){var students=$state.params.students.split(",");$scope.total=students.length,$scope.words="words",$scope.letters="letters",$scope.students=students}})}]),angular.module("app").directive("assessment",function($rootScope,$state,$sce,$timeout){return{restrict:"A",replace:!0,transclude:!0,scope:{type:"=",student:"=",assessment:"=",edit:"=",print:"@"},templateUrl:"views/assessment.html",link:function($scope,$element,$attrs,$window){if($scope.show=!1,$scope.showAllAssessments=$scope.edit,$timeout(function(){$scope.link=window.location.href.replace("/admin","")},0),void 0==$rootScope.cache.GrowthCalculator){var items1=[];$rootScope.Airtable("GrowthCalculator").select({sort:[{field:"ID",direction:"asc"}]}).eachPage(function(records,fetchNextPage1){records.forEach(function(record){record.fields.id=record.id,items1.push(record.fields)}),fetchNextPage1()},function(error){$rootScope.cache.GrowthCalculator=items1,$scope.growth=items1,$scope.$apply()})}else $scope.growth=$rootScope.cache.GrowthCalculator;
// if ($rootScope.cache[$scope.type + ' Groups'] == undefined) {
//   var groups = [];
//   $rootScope.Airtable($scope.type + ' Groups').select({
//     sort: [
//       {field: 'Order', direction: 'asc'}
//     ]
//   }).eachPage(function page(records, fetchNextPage) {
//     records.forEach(function (record) {
//       record.fields.id = record.id;
//       groups.push(record.fields);
//     });
//     fetchNextPage();
//   }, function done(error) {
//     $rootScope.cache[$scope.type + ' Groups'] = groups;
//     $scope.groups = groups;
//     $scope.$apply();
//   });
// }
// else {
//   $scope.groups = $rootScope.cache[$scope.type + ' Groups'];
// }
var calculateQuarters=function(assessment,assessments){for(var quarters=$scope.quarters,last=0,i=0;i<quarters.length;i++)for(var j=last;j<assessments.length;j++)console.log(assessments[j].Date,quarters[i].LastDay),assessments[j].Date<=quarters[i].LastDay&&(quarters[i].assessment=assessments[j],last=i+1);$scope.quarters=quarters,$scope.$apply(),console.log("quarters",quarters)},getStudents=function(cb,assessment){var studentID="string"==typeof $scope.student?$scope.student:$scope.student.id;$rootScope.Airtable("Students").find(studentID,function(err,record){record.fields.id=record.id,$scope.student=record.fields,$scope.show=!$scope.print,$scope.$apply();var assessments=[];$rootScope.Airtable("Assessments").select({filterByFormula:'{Student} = "'+record.fields.ID+'"',sort:[{field:"Date",direction:"asc"}]}).eachPage(function(records,fetchNextPage){records.forEach(function(record){record.fields.id=record.id,assessments.push(record.fields)}),fetchNextPage()},function(error){
// Get the Quarters
if($scope.show=!!assessments.length,$scope.assessments=assessments,void 0==$rootScope.cache.Quarters){var items0=[];$rootScope.Airtable("Quarters").select({sort:[{field:"Name",direction:"asc"}]}).eachPage(function(records0,fetchNextPage0){records0.forEach(function(record){record.fields.id=record.id,items0.push(record.fields)}),fetchNextPage0()},function(error){$rootScope.cache.Quarters=items0,$scope.quarters=items0,$scope.$apply(),cb&&cb(assessment,assessments)})}else $scope.quarters=$rootScope.cache.Quarters,cb&&cb(assessment,assessments);$scope.$apply()})})};getStudents(calculateQuarters),$scope.toggleAllAssessments=function(){$scope.showAllAssessments=!$scope.showAllAssessments},
// $scope.linkClick = function ($event) {
//   $event.target.select();
// };
//
// $scope.toggleWord = function(word) {
//   var index = $scope.assessment.Items.indexOf(word);
//   if (index != -1) {
//     $scope.assessment.Items.splice(index, 1);
//   }
//   else {
//     $scope.assessment.Items.push(word);
//   }
//   //$scope.$apply();
// }
//
// $scope.setColor = function(color) {
//   $scope.assessment.Color[0] = color.id;
//   $scope.activeColor = color;
// }
$scope.newAssessment=function(){$scope.assessment={Student:[$scope.student],Grade:$scope.student.Grade,Date:new Date,Type:"Fiction",TextLevel:"",ExpectedTextLevel:"",Accuracy:"",Comprehension:"",Fluency:"",Mastery:"Hard",Closeness:"",Notes:""}},$scope.clickAssessment=function(item,e){if(e.preventDefault(),$scope.edit)if($scope.assessment&&item.id==$scope.assessment.id)$scope.assessment=null;else for(var j=0;j<$scope.assessments.length;j++)$scope.assessments[j].id==item.id&&($scope.assessments[j].Date=new Date($scope.assessments[j].Date),$scope.assessment=$scope.assessments[j])},$scope.updateCloseness=function(){if($scope.assessment.TextLevel=$scope.assessment.TextLevel.toUpperCase(),$scope.growth.length&&$scope.assessment.TextLevel&&$scope.assessment.Date){
// Get % of school-year that is complete
// Note: months are -1 what you expect so 7 = August, 5 = June
var now=new Date($scope.assessment.Date),start=new Date(now.getFullYear(),7,14);start=start>now?new Date(now.getFullYear()-1,7,14):start;for(var end=new Date(start.getFullYear()+1,5,14),fraction=(now-start)/(end-start),gradeLevels=[],gradeKey=null,i=0;i<$scope.growth.length;i++)$scope.growth[i].GradeLevel==$scope.student.Grade&&(gradeKey=gradeKey?gradeKey:i,gradeLevels.push($scope.growth[i]));var key=Math.round(fraction*gradeLevels.length);console.log("fraction",fraction),console.log("key",key,gradeKey);var expected=0,current=0,foundTextLevel=!1;for(console.log($scope.growth),i=0;i<$scope.growth.length;i++){var item=$scope.growth[i];i<gradeKey+key&&(console.log(i,item.Growth),expected+=parseFloat(item.Growth),$scope.assessment.ExpectedTextLevel=item.TextLevel),foundTextLevel||(current+=parseFloat(item.Growth)),item.TextLevel==$scope.assessment.TextLevel&&(foundTextLevel=!0)}$scope.assessment.Closeness=current-expected,$scope.assessment.GradeLevel=Math.floor(current),console.log("expected",expected,current),console.log(gradeLevels),
//
// var gradeLevels = [];
// var expected = 0;
// var current = 0;
// while (var i < $scope.growth.length && var grade <= $scope.student.Grade) {
//   var item = $scope.growth[i];
//   if (item.GradeLevel === $scope.student.Grade) {
//     gradeLevels.push($scope.growth[i])
//   }
// }
//for (var i=0; i<)
console.log(start,end),console.log(),console.log()}},$scope.cancelAssessment=function(){$scope.assessment=null},$scope.saveAssessment=function(assessment){
// if (!assessment.Color || !assessment.Color[0]) {
//   alert('You must select a color');
//   return false;
// }
if(assessment.id){var id=assessment.id;delete assessment.id,delete assessment.ID,delete assessment.$$hashKey,console.log("Update assessment",assessment),$rootScope.Airtable("Assessments").update(id,assessment,function(err,record){return err?(alert("There was a problem saving this assessment!"),void console.error(err)):($scope.assessment=null,void getStudents(saveAssessmentCallback,assessment))})}else assessment.Date=new Date(assessment.Date).toISOString().slice(0,10),assessment.Student[0]="object"==typeof assessment.Student[0]?assessment.Student[0].id:assessment.Student[0],console.log("Create assessment",assessment),$rootScope.Airtable("Assessments").create(assessment,function(err,record){return err?(alert("There was a problem saving this assessment!"),void console.log(err)):($scope.assessment=null,void getStudents(saveAssessmentCallback,assessment))})};var saveAssessmentCallback=function(assessment,assessments){var studentEdit={};studentEdit.LastAssessment=assessment.Date;assessments.pop();studentEdit.LastAssessment=assessment.Date,studentEdit.Closeness=assessment.Closeness,studentEdit.Accuracy=assessment.Accuracy,studentEdit.Comprehension=assessment.Comprehension,studentEdit.Fluency=assessment.Fluency,studentEdit.Notes=assessment.Notes,studentEdit.Mastery=assessment.Mastery,studentEdit.TextLevel=assessment.TextLevel,studentEdit.Type=assessment.Type,$rootScope.Airtable("Students").update($scope.student.id,studentEdit,function(err,record){return err?void console.log(err):($scope.assessment=null,void getStudents(calculateQuarters))})}}}})}(jQuery);